// ---------------------------------------------------------------------
//
// Copyright (C) 1999 - 2014 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------



for (S1, S2 : REAL_SCALARS)
  {
    template class RelaxationBlock<SparseMatrix<S1>, S2>;
    template class RelaxationBlockJacobi<SparseMatrix<S1>, S2>;
    template class RelaxationBlockSOR<SparseMatrix<S1>, S2>;
    template class RelaxationBlockSSOR<SparseMatrix<S1>, S2>;
  }


for (S1, S2, S3: REAL_SCALARS)
  {
// ------------ RelaxationBlockJacobi -----------------
    template
      void RelaxationBlockJacobi<SparseMatrix<S1>, S2>::step
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void RelaxationBlockJacobi<SparseMatrix<S1>, S2>::Tstep
      (Vector<S3> &, const Vector<S3> &) const;

// ------------ RelaxationBlockSOR -----------------
    template
      void RelaxationBlockSOR<SparseMatrix<S1>, S2>::step
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void RelaxationBlockSOR<SparseMatrix<S1>, S2>::Tstep
      (Vector<S3> &, const Vector<S3> &) const;

// ------------ RelaxationBlockSSOR -----------------
    template
      void RelaxationBlockSSOR<SparseMatrix<S1>, S2>::step
      (Vector<S3> &, const Vector<S3> &) const;
    template
      void RelaxationBlockSSOR<SparseMatrix<S1>, S2>::Tstep
      (Vector<S3> &, const Vector<S3> &) const;
  }


for (S2 : REAL_SCALARS)
{
#ifdef DEAL_II_WITH_TRILINOS
    template class RelaxationBlock<TrilinosWrappers::SparseMatrix, S2>;
    template class RelaxationBlockJacobi<TrilinosWrappers::SparseMatrix, S2>;
    template class RelaxationBlockSOR<TrilinosWrappers::SparseMatrix, S2>;
    template class RelaxationBlockSSOR<TrilinosWrappers::SparseMatrix, S2>;
    
    template void RelaxationBlockJacobi<TrilinosWrappers::SparseMatrix, S2>::step
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;
    template void RelaxationBlockJacobi<TrilinosWrappers::SparseMatrix, S2>::Tstep
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;

    template void RelaxationBlockSOR<TrilinosWrappers::SparseMatrix, S2>::step
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;
    template void RelaxationBlockSOR<TrilinosWrappers::SparseMatrix, S2>::Tstep
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;

// ------------ RelaxationBlockSSOR -----------------
    template void RelaxationBlockSSOR<TrilinosWrappers::SparseMatrix, S2>::step
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;
    template void RelaxationBlockSSOR<TrilinosWrappers::SparseMatrix, S2>::Tstep
      (TrilinosWrappers::MPI::Vector &, const TrilinosWrappers::MPI::Vector &) const;
#endif
}

